import{_ as e,c as s,o as a,a2 as i}from"./chunks/framework.BLHWSx9w.js";const m=JSON.parse('{"title":"Function: mergeObject()","description":"","frontmatter":{},"headers":[],"relativePath":"md/functions/mergeObject.md","filePath":"md/functions/mergeObject.md"}'),t={name:"md/functions/mergeObject.md"},n=i(`<p><a href="./../">z-util-page v3.2.1</a> / mergeObject</p><h1 id="function-mergeobject" tabindex="-1">Function: mergeObject() <a class="header-anchor" href="#function-mergeobject" aria-label="Permalink to &quot;Function: mergeObject()&quot;">​</a></h1><blockquote><p><strong>mergeObject</strong>&lt;<code>T</code>&gt;(<code>origin</code>, <code>ob</code>, ...<code>more</code>): <code>T</code></p></blockquote><p>深度合并n个对象值</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><p>• <strong>T</strong> <em>extends</em> <code>StandardObject</code></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>origin</strong>: <code>T</code></p><p>将多个对象深度合并到该对象</p><p>• <strong>ob</strong>: <code>undefined</code> | <code>StandardObject</code></p><p>被合并对象</p><p>• ...<strong>more</strong>: <code>StandardObject</code>[]</p><p>其余被合并对象</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>T</code></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { b: { d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mergeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, c);</span></span></code></pre></div>`,17),r=[n];function p(h,o,l,c,d,k){return a(),s("div",null,r)}const b=e(t,[["render",p]]);export{m as __pageData,b as default};
