import{_ as a,c as s,o as e,a2 as i}from"./chunks/framework.DCBnfD6G.js";const m=JSON.parse('{"title":"Function: draggable()","description":"","frontmatter":{},"headers":[],"relativePath":"md/namespaces/DomHelper/functions/draggable.md","filePath":"md/namespaces/DomHelper/functions/draggable.md"}'),n={name:"md/namespaces/DomHelper/functions/draggable.md"},t=i(`<p><a href="./../../../">z-util-page v3.3.0</a> / <a href="./../">DomHelper</a> / draggable</p><h1 id="function-draggable" tabindex="-1">Function: draggable() <a class="header-anchor" href="#function-draggable" aria-label="Permalink to &quot;Function: draggable()&quot;">​</a></h1><blockquote><p><strong>draggable</strong>(<code>dom</code>): <code>false</code> | <code>object</code></p></blockquote><p>将一个元素处理为可拖动元素</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>dom</strong>: <code>HTMLElement</code></p><p>要处理的元素</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>false</code> | <code>object</code></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draggable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dom: HTMLElement);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭拖动功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开启拖动功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定一个子元素，当该鼠标按下该元素时，关闭拖动功能，鼠标抬起后恢复拖动功能</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">handle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dom: HTMLElement);</span></span></code></pre></div>`,11),l=[t];function p(r,h,o,d,c,k){return e(),s("div",null,l)}const E=a(n,[["render",p]]);export{m as __pageData,E as default};
