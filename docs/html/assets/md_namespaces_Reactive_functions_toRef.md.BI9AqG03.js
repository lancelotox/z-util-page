import{_ as a,c as e,o as s,a2 as t}from"./chunks/framework.CbHMctiC.js";const g=JSON.parse('{"title":"Function: toRef()","description":"","frontmatter":{},"headers":[],"relativePath":"md/namespaces/Reactive/functions/toRef.md","filePath":"md/namespaces/Reactive/functions/toRef.md"}'),i={name:"md/namespaces/Reactive/functions/toRef.md"},n=t(`<p><a href="./../../../">z-util-page v3.3.0</a> / <a href="./../">Reactive</a> / toRef</p><h1 id="function-toref" tabindex="-1">Function: toRef() <a class="header-anchor" href="#function-toref" aria-label="Permalink to &quot;Function: toRef()&quot;">​</a></h1><blockquote><p><strong>toRef</strong>(<code>val</code>, <code>key</code>): <code>object</code></p></blockquote><p>将响应式对象的某键值转为ref</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>• <strong>val</strong>: <code>any</code></p><p>响应式对象</p><p>• <strong>key</strong>: <code>string</code> | <code>symbol</code></p><p>键值</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>object</code></p><p>Ref</p><h3 id="value" tabindex="-1">value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;value&quot;">​</a></h3><blockquote><p><code>get</code> <strong>value</strong>(): <code>any</code></p></blockquote><blockquote><p><code>set</code> <strong>value</strong>(<code>value</code>): <code>void</code></p></blockquote><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>value</strong>: <code>any</code></p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>any</code></p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2</span></span></code></pre></div>`,21),o=[n];function r(l,h,p,c,d,k){return s(),e("div",null,o)}const m=a(i,[["render",r]]);export{g as __pageData,m as default};
