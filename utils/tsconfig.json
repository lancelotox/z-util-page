{
  "compilerOptions": {
    // 隔离模块
    "isolatedModules": false,
    // 不输出编辑后文件
    "noEmit": false,
    // 是否生成类型文件
    "declaration": true,
    // 类型文件输出目录
    "declarationDir": "./types",
    // 输出目录
    "outDir": "es",
    // 指定编译后ECMAScript目标版本
    "target": "ES6",
    // 指定编译后代码的模块系统 "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"
    "module": "ES6",
    // 以严格模式解析并为每个源文件生成 "use strict"语句
    "alwaysStrict": false,
    // 启用ts严格类型检查模式
    "strict": true,
    // 在 .tsx文件里支持JSX： "react-jsx"或 "Preserve"
    "jsx": "react-jsx",
    // 是否允许编译js文件
    "allowJs": false,
    // 从 tslib 导入辅助工具函数(比如 __extends， __rest等)
    "importHelpers": true,
    // 决定TS编译时如何处理模块。"AMD" or "System" or "ES6" ? "Classic" : "Node"
    "moduleResolution": "node",
    // 启用实验性的ES装饰器。需要安装@type/estree
    "experimentalDecorators": true,
    // 忽略所有的声明文件（ *.d.ts）的类型检查。
    "skipLibCheck": true,
    // 允许以ES6的方式引入commonjs模块
    "esModuleInterop": true,
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 禁止对同一个文件的不一致的引用。
    "forceConsistentCasingInFileNames": true,
    // 在创建类属性时,使用Object.defineProperty代替赋值操作创建属性
    "useDefineForClassFields": true,
    // 生成相应的 .map文件。
    "sourceMap": false,
    // 解析非相对模块名的基准目录
    "baseUrl": ".",
    // 如果指定了typeRoots，只有typeRoots下面的包才会被包含进来
    // "typeRoots" : ["./typings"],
    // 如果指定了types，只有被列出来的包才会被包含进来
    // "types": ["node"],
    // (模块名)到(基于baseUrl的路径)映射的列表。
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    // 编译过程中需要引入的库文件的列表。
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "esnext.asynciterable",
      "scripthost"
    ]
  },
  // 指定包含哪些文件
  // "files": [],
  // 指定包含哪些文件或目录
  "include": [
    "./src/index.ts",
    "./src/*.d.ts"
  ],
  // 指定排除哪些文件或目录
  "exclude": [
    "node_modules"
  ],
  // 继承指定配置文件
  // "extends": "./tsconfig"
}